syntax = "proto3";

option java_package = "ca.wise.config.proto";
option java_multiple_files = true;
option csharp_namespace = "WISE_API.NET.Proto";

import "google/protobuf/wrappers.proto";

package wise.api;

/**
 * General server configuration details.
 */
message ServerConfiguration {
    //Log output from W.I.S.E. to a file
    LogFile log = 1;

    //Files to signal job start and finish
    Signals signals = 2;

    //Hardware execution limits
    Hardware hardware = 3;

    oneof commsType {
        //Communication between Builder and Manager will take place over a dedicated socket
        SocketConnection socket = 4;
        //Communication between all applications will take place over MQTT
        MqttConnection mqtt = 5;
    }

    //Settings the API will use to connect to Builder
    BuilderConnection builder = 6;

    //The directory where sample data is stored for testing purposes
    string exampleDirectory = 7;

    //Are the W.I.S.E. Manager settings already setup for v2
    google.protobuf.BoolValue already_v2 = 9;

    /**
     * Settings detailing log output from W.I.S.E..
     */
    message LogFile {
        //The name of the file to log to
        string filename = 1;

        //The level of information to write to the log
        Verbosity verbosity = 2;
    }

    /**
     * Signal files that indicate that a job has started
     * or finished. Can be used by processes that implement
     * file system watchers to determine when a job has
     * started and finished.
     */
    message Signals {
        //The name of a file to write when the job starts
        string start = 1;

        //The name of a file to write when the job finishes
        string complete = 2;
    }

    /**
     * Default job execution limits so that it may
     * share hardware with other jobs or other services.
     */
    message Hardware {
        //The maximum number of processes that W.I.S.E. can start to run a job
        int32 processes = 1;

        //The maximum number of cores that W.I.S.E. should run on if processor affinity is enabled
        int32 cores = 2;
    }

    /**
     * Details for connecting W.I.S.E. Builder to W.I.S.E. Manager using a direct
     * socket connection.
     */
    message SocketConnection {
        //The IP address or domain name used by the machine running W.I.S.E. Manager
        string address = 1;

        //The port number used to connect to W.I.S.E. Manager
        int32 port = 2;
    }

    /**
     * Details for connecting to an MQTT broker. Can be used by W.I.S.E. for communicating
     * status messages, Builder and Manager for sharing files and starting jobs, and the
     * API for listening for job updates.
     */
    message MqttConnection {
        //The IP address or hostname of the MQTT broker
        string hostname = 1;

        //The port that MQTT is running on
        int32 port = 2;

        //The base text to be used as a topic for communicating over MQTT.
        //Allows other services or multiple, independent W.I.S.E. instances to be
        //run on the same broker without collisions. Must not include '/'.
        string topic = 3;

        //The verbosity of log messages to output
        Verbosity verbosity = 4;

        //The quality of service to send message at. Should be 0-2
        int32 qos = 5;

        //An optional username required to authenticate with the MQTT broker
        string username = 6;

        //An optional password required to authenticate with the MQTT broker
        string password = 7;
    }

    /**
     * Details for how the API will connect to their related instance
     * of Builder.
     */
    message BuilderConnection {
        //The hostname of the machine the Builder is running on
        string hostname = 1;

        //The port that Builder is listening on
        int32 port = 2;

        //The outoutp file format that will be generated by Builder
        OutputType format = 3;
    }

    /**
     * The output verbosity. Each level includes the outputs
     * from the level before it.
     */
    enum Verbosity {
        //No output
        NONE = 0;
        //only output complete application failures
        SEVERE = 1;
        //output load warnings
        WARN = 2;
        //output job status messages
        INFO = 3;
        //output all information
        MAX = 4;
    }

    /**
     * The type of output file that will be generated by Builder.
     */
    enum OutputType {
        //Pretty printed JSON
        JSON = 0;
        //Minimized JSON
        JSON_MINIMAL = 1;
        //Binary
        BINARY = 2;
        //XML. Only supported on Windows
        XML = 3;
        //Pretty printed JSON with the v2 schema
        JSON_V2 = 4;
        //Minimized JSON with the v2 schema
        JSON_MINIMAL_V2 = 5;
        //Binary with the v2 schema
        BINARY_V2 = 6;
    }
}
